//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 10/10/2020 12:58:24
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace MagoTechincalTest
{

    public partial class MagoModelEntity : DbContext
    {

        public MagoModelEntity() :
            base()
        {
            OnCreated();
        }

        public MagoModelEntity(DbContextOptions<MagoModelEntity> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=(LocalDB)\MSSQLLocalDB;Initial Catalog=C:\USERS\DEANH\ONEDRIVE\DOCUMENTS\MAGO.MDF;Integrated Security=True;Persist Security Info=True");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Airplane> Airplanes
        {
            get;
            set;
        }

        public virtual DbSet<Reservation> Reservations
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.AirplaneMapping(modelBuilder);
            this.CustomizeAirplaneMapping(modelBuilder);

            this.ReservationMapping(modelBuilder);
            this.CustomizeReservationMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Airplane Mapping

        private void AirplaneMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Airplane>().ToTable(@"Airplanes", @"dbo");
            modelBuilder.Entity<Airplane>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Airplane>().Property(x => x.Type).HasColumnName(@"Type").HasColumnType(@"nchar(10)").IsRequired().ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Airplane>().Property(x => x.Size).HasColumnName(@"Size").HasColumnType(@"nchar(10)").IsRequired().ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Airplane>().Property(x => x.Model).HasColumnName(@"Model").HasColumnType(@"nchar(10)").IsRequired().ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Airplane>().HasKey(@"Id");
        }

        partial void CustomizeAirplaneMapping(ModelBuilder modelBuilder);

        #endregion

        #region Reservation Mapping

        private void ReservationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Reservation>().ToTable(@"Reservations", @"dbo");
            modelBuilder.Entity<Reservation>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Reservation>().Property(x => x.PlaneType).HasColumnName(@"PlaneType").HasColumnType(@"nchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Reservation>().Property(x => x.Slots).HasColumnName(@"Slots").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Reservation>().Property(x => x.PlaneId).HasColumnName(@"PlaneId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Reservation>().HasKey(@"Id");
        }

        partial void CustomizeReservationMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
